@model CaseManagement.ViewModels.Cases.Output.AllCasesOutputModel

@if (Model.Announcements.Length > 0)
{
    <div class="marquee3k p-1"
         data-speed="0.9"
         data-pausable="true">
        <div id="marquee-content">@Html.Raw(Model.Announcements)</div>
    </div>
}

<div class="col-md-4 mx-auto text-center mt-5">
    <section>
        <h4>Cases</h4>
        <hr />
        <a class="btn btn-primary" asp-controller="Cases" asp-action="Create">Create Case</a>
        <form asp-controller="Cases" asp-action="SearchCase" id="search-case" method="get" class="m-5">
            <div class="row mx-auto">
                <div class="form-group mx-auto my-auto">
                    <input name="caseNumber" placeholder="Case number" class="form-control" />
                </div>
                <div class="form-group mx-auto my-auto">
                    <button type="submit" class="btn btn-success">SEARCH</button>
                </div>
            </div>
        </form>
    </section>
</div>

@* Order by logic for showing the order icon in the table's headers *@
@{
    string PutOrderByIcon(string value)
    {
        string orderedAsc = "<img class=\"order-by-icon pl-1\" src=\"/img/arrow-up.png\">";
        string orderedDesc = "<img class=\"order-by-icon pl-1\" src=\"/img/arrow-down.png\">";

        var orderedByProp = Model.OrderedBy.Split('-').FirstOrDefault();
        var orderedByAscOrDesc = Model.OrderedBy.Split('-').LastOrDefault();

        if (value == orderedByProp)
        {
            return orderedByAscOrDesc == "asc" ?
                orderedAsc : orderedDesc;
        }

        return string.Empty;
    }
}

<div id="cases-table" class="text-center">

    <button type="button" id="orderAndFilterBtn" class="btn btn-info btn-sm mb-2">Order & filter</button>

    <div id="orderAndFilterModal" class="modal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h6 class="modal-title">Order and filter table data</h6>
                    <button type="button" class="close closeModalBtn" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form method="get">
                        <div class="row mx-auto mb-3">
                            <div class="my-auto mr-2">Order by:</div>
                            <div class="my-auto">
                                <select asp-for="@Model.OrderedBy" name="orderBy" class="form-control p-0">
                                    <option value="CreatedOn-desc">Newest first</option>
                                    <option value="CreatedOn-asc">Oldest first</option>
                                    <option value="Status-desc">Status descending</option>
                                    <option value="Status-asc">Status ascending</option>
                                    <option value="Priority-desc">Highest priority first</option>
                                    <option value="Priority-asc">Lowest priority first</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mx-auto">
                            <div class="my-auto mr-2 mx-auto">Status:</div>
                            <div class="my-auto mr-2 mx-auto">Priority:</div>
                        </div>
                        <div class="row mx-auto">
                            <div class="mx-auto">

                                @foreach (var caseStatus in Model.AllAvailableCaseStatuses)
                                {
                                    var isCaseStatusChecked = Model.SelectedStatuses.Contains(caseStatus.Id) ? "checked" : string.Empty;

                                    <div class="form-check ml-4">
                                        <label class="form-check-label d-flex">
                                            <input class="form-check-input" type="checkbox" name="selectedStatuses" value="@caseStatus.Id" @isCaseStatusChecked>
                                            @caseStatus.Status
                                        </label>
                                    </div>
                                }

                            </div>
                            <div class="mx-auto">

                                @foreach (var casePriority in Model.AllAvailableCasePriorities)
                                {
                                    var isCasePriorityChecked = Model.SelectedPriorities.Contains(casePriority.Id) ? "checked" : string.Empty;

                                    <div class="form-check ml-4">
                                        <label class="form-check-label d-flex">
                                            <input class="form-check-input" type="checkbox" name="selectedPriorities" value="@casePriority.Id" @isCasePriorityChecked>
                                            @casePriority.Priority
                                        </label>
                                    </div>
                                }

                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary py-1 px-2 mr-1">OK</button>
                        <button type="button" class="btn btn-secondary py-1 px-2 closeModalBtn ml-1">Close</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <table class="table table-hover border">
        <thead>
            <tr class="table-active">

                <th scope="col">Created on @Html.Raw(PutOrderByIcon("CreatedOn"))</th>
                <th scope="col">Case number</th>
                <th scope="col">Subject</th>
                <th scope="col">Status @Html.Raw(PutOrderByIcon("Status"))</th>
                <th scope="col">Priority @Html.Raw(PutOrderByIcon("Priority"))</th>
                <th scope="col">Agent</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>

            @foreach (var caseModel in Model.Cases)
            {
                <tr>
                    <td>@caseModel.CreatedOn</td>
                    <td>@caseModel.Number</td>
                    <td>@caseModel.Subject</td>
                    <td>@caseModel.Status</td>
                    <td>@caseModel.Priority</td>
                    <td>@caseModel.Agent</td>
                    <td><a class="btn btn-dark p-1" asp-controller="Cases" asp-action="ViewUpdate" asp-route-id="@caseModel.Id">VIEW/UPDATE</a></td>
                </tr>
            }

        </tbody>
    </table>

    @if (Model.Cases.Length == 0)
    {
        <h6>No cases available.</h6>
    }

    @* pagination *@

    @{
        // Needed query string parameters for proper ordering and filtering when navigating through pages
        // Note that, when this is used the page number is also passed after it in the format: &page=X
        var parameters = new
        {
            orderBy = Model.OrderedBy,
            selectedStatuses = Model.SelectedStatuses,
            selectedPriorities = Model.SelectedPriorities
        };
    }

    <div>
        <ul class="pagination justify-content-center">

            @if (Model.CurrentPage == 1)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#">&laquo;</a>
                </li>
            }
            else if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", parameters)&page=1">&laquo;</a>
                </li>
            }

            @{
                // -5 and +5 so it can show 5 pages before and 5 pages ahead (if available) of the current one
                int firstPageToShow = Model.CurrentPage - 5 < 1 ? 1 : Model.CurrentPage - 5;
                int lastPageToShow = Model.CurrentPage + 5 > Model.LastPage ? Model.LastPage : Model.CurrentPage + 5;

                for (int i = firstPageToShow; i <= lastPageToShow; i++)
                {
                    if (Model.CurrentPage == i)
                    {
                        <li class="page-item active">
                            <a class="page-link" href="#">@i</a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", parameters)&page=@i">@i</a>
                        </li>
                    }
                }
            }

            @if (Model.CurrentPage < Model.LastPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", parameters)&page=@Model.LastPage">&raquo;</a>
                </li>
            }
            else if (Model.AllCases > 0)
            {
                <li class="page-item disabled">
                    <a class="page-link" href="#">&raquo;</a>
                </li>
            }

        </ul>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/marquee3k.js"></script>
    <script>Marquee3k.init();</script>
    <script>
        let orderAndFilterModal = document.getElementById("orderAndFilterModal");

        let orderAndFilterBtn = document.getElementById("orderAndFilterBtn");
        orderAndFilterBtn.addEventListener("click", openModal);

        let closeModalBtns = document.getElementsByClassName("closeModalBtn");
        for (closeModalBtn of closeModalBtns) {
            closeModalBtn.addEventListener("click", closeModal);
        }

        function openModal(e) {
            orderAndFilterModal.classList.add("d-block");
        }

        function closeModal(e) {
            orderAndFilterModal.classList.remove("d-block");
        }
    </script>
}
