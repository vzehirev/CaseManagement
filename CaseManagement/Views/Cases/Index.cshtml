@model CaseManagement.ViewModels.Cases.Output.AllCasesOutputModel

@if (Model.Announcements?.Length > 0)
{
    <div class="marquee3k p-1"
         data-speed="0.9"
         data-pausable="true">
        <div id="marquee-content">@Html.Raw(Model.Announcements)</div>
    </div>
}

<div class="col-md-4 mx-auto text-center mt-5">
    <section>
        <h4>Cases</h4>
        <hr />
        <a class="btn btn-primary" asp-controller="Cases" asp-action="Create">Create Case</a>
        <form asp-controller="Cases" asp-action="SearchCase" id="search-case" method="get" class="m-5">
            <div class="row mx-auto">
                <div class="form-group mx-auto my-auto">
                    <input name="caseNumber" placeholder="Case number" class="form-control" />
                </div>
                <div class="form-group mx-auto my-auto">
                    <button type="submit" class="btn btn-success">SEARCH</button>
                </div>
            </div>
        </form>
    </section>
</div>

<partial name="CasesTablePartial" model="Model" />

@* pagination *@
@{
    // Needed query string parameters for proper ordering and filtering when navigating through pages
    // Note that, when this is used the page number is also passed after it in the format: &pageNumber=X
    var parameters = new
    {
        orderBy = Model.OrderedBy,
        selectedStatuses = Model.SelectedStatuses,
        selectedPriorities = Model.SelectedPriorities
    };
}

<div>
    <ul class="pagination justify-content-center">

        @if (Model.CurrentPage == 1)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#">&laquo;</a>
            </li>
        }
        else if (Model.CurrentPage > 1)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", parameters)&pageNumber=1">&laquo;</a>
            </li>
        }

        @{
            // -5 and +5 so it can show 5 pages before and 5 pages ahead (if available) of the current one
            int firstPageToShow = Model.CurrentPage - 5 < 1 ? 1 : Model.CurrentPage - 5;
            int lastPageToShow = Model.CurrentPage + 5 > Model.LastPage ? Model.LastPage : Model.CurrentPage + 5;

            for (int i = firstPageToShow; i <= lastPageToShow; i++)
            {
                if (Model.CurrentPage == i)
                {
                    <li class="page-item active">
                        <a class="page-link" href="#">@i</a>
                    </li>
                }
                else
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", parameters)&pageNumber=@i">@i</a>
                    </li>
                }
            }
        }

        @if (Model.CurrentPage < Model.LastPage)
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", parameters)&pageNumber=@Model.LastPage">&raquo;</a>
            </li>
        }
        else if (Model.AllCases > 0)
        {
            <li class="page-item disabled">
                <a class="page-link" href="#">&raquo;</a>
            </li>
        }

    </ul>
</div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/marquee3k.js"></script>
    <script>Marquee3k.init();</script>
    <script>
        let orderAndFilterModal = document.getElementById("orderAndFilterModal");

        let orderAndFilterBtn = document.getElementById("orderAndFilterBtn");
        orderAndFilterBtn.addEventListener("click", openModal);

        let closeModalBtns = document.getElementsByClassName("closeModalBtn");
        for (closeModalBtn of closeModalBtns) {
            closeModalBtn.addEventListener("click", closeModal);
        }

        function openModal(e) {
            orderAndFilterModal.classList.add("d-block");
        }

        function closeModal(e) {
            orderAndFilterModal.classList.remove("d-block");
        }
    </script>
}